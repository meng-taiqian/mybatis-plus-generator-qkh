package ${package.Vo};

#if(${activeRecord})
import java.io.Serializable;

#end
#foreach($pkg in ${table.importPackages})
import ${pkg};
#end
#if(${entityLombokModel})

import lombok.Data;
import lombok.experimental.Accessors;
#end
#if(${cfg.usingSwagger})
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @since ${date}
 */
#if(${entityLombokModel})
@Data
@Accessors(chain = true)
#end
#if(${cfg.usingSwagger})
@ApiModel("$!{table.comment}")
#end
#if(${superEntityClass})
public class ${table.qryVoName} extends ${superEntityClass}#if(${activeRecord})<${entity}>#end {
#elseif(${activeRecord})
public class ${table.qryVoName} extends Model<${entity}> {
#else
public class ${table.qryVoName} implements Serializable {
#end
    //${table.voName} ${package.Vo}
    private static final long serialVersionUID = 1L;

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
#if(${field.propertyName} != "createTime" && ${field.propertyName} != "updateTime" && ${field.propertyName} != "id" && ${field.propertyName} != "platformId")

#if(${field.keyFlag})
#set($keyPropertyName=${field.propertyName})
#end
#if("$!field.comment" != "")
    /**
     * ${field.comment}
     */
#end
#if(${cfg.usingSwagger})
	@ApiModelProperty(value = "$!field.comment"#if("$!field.nullAble" == "NO")#if(!${field.keyFlag}), required = true#end#end)
#end
## 乐观锁注解
#if(${versionFieldName}==${field.name})
	@Version
#end
## 逻辑删除注解
#if(${logicDeleteFieldName}==${field.name})
    @TableLogic
#end
	private ${field.propertyType} ${field.propertyName};
#end
#end

#if(${cfg.containPage})
    @ApiModelProperty("页码")
    private Integer pageNum;

    @ApiModelProperty("每页条数")
    private Integer pageSize;

#end
## ----------  END 字段循环遍历  ----------
#if(!${entityLombokModel})
#foreach($field in ${table.fields})
#if(${field.propertyName} != "createTime" && ${field.propertyName} != "updateTime" && ${field.propertyName} != "id" && ${field.propertyName} != "platformId")
#if(${field.propertyType.equals("boolean")})
#set($getprefix="is")
#else
#set($getprefix="get")
#end
	public ${field.propertyType} ${getprefix}${field.capitalName}() {
		return ${field.propertyName};
	}

#if(${entityBuilderModel})
	public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
#else
	public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
#end
		this.${field.propertyName} = ${field.propertyName};
#if(${entityBuilderModel})
		return this;
#end
	}
#end
#end
    #if(${cfg.containPage})
    public void setPageNum(Integer pageNum) {
        this.pageNum = pageNum;
    }

    public Integer getPageNum() {
        return pageNum;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    public Integer getPageSize() {
        return pageSize;
    }
    #end
#end
#if(${entityColumnConstant})
#foreach($field in ${table.fields})
	public static final String ${field.name.toUpperCase()} = "${field.name}";

#end
#end

}
